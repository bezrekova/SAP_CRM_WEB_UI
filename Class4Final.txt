CLASS zwscl_bpmcustomer_update DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zwsii_bpmcustomer_update .

    TYPES:
      BEGIN OF gst_check_attr ,
        templ  TYPE crmt_prof_template,
        atname TYPE atnam,
        atwrt  TYPE atwrt,
        fcode  TYPE char1,
      END OF   gst_check_attr .

    TYPES :
      BEGIN OF gst_addr,
        addrguid TYPE   BU_ADDRESS_GUID,
      END OF gst_addr.

    TYPES:
      gtt_check_attr TYPE TABLE OF gst_check_attr .
    TYPES:
    gtt_addr TYPE TABLE OF gst_addr.

    DATA gt_attributes TYPE gtt_check_attr .
    DATA gs_attributes TYPE gst_check_attr .
    CONSTANTS gc_org TYPE string VALUE '2' ##NO_TEXT.
    CONSTANTS gc_person TYPE string VALUE '1' ##NO_TEXT.
    CONSTANTS gc_ent TYPE string VALUE '3' ##NO_TEXT.
    DATA gs_output TYPE zwsbpmcust_update_output .
    DATA gs_input TYPE zwsbpmcust_update_input .
    DATA gv_client_type TYPE char10 .
    DATA gs_current_partner TYPE zwsbpmcust_update_data_req .
  PROTECTED SECTION.
private section.

  data GR_LOG type ref to ZCL_BALLOG .
  data GV_PARTNER type BU_PARTNER .
  data GV_TYPE type BU_TYPE .
  data GT_MESSAGES type BAPIRET2_TAB .
  data GV_NO_SAVE type ABAP_BOOL value ABAP_FALSE ##NO_TEXT.
  data GS_PARTNER type BUT000 .
  data GV_PARTNER_GUID type BU_PARTNER_GUID .
  data GT_MA_ATTR type ZTT_MA_BP_INFO .
  data GS_ZDATA type ZTAB00000B_ATTR .
  data GT_IDENTIFICATION type BAPIBUS1006_ID_DETAILS_T .
  data GT_TAX_NUM type BUS_TAX_T .
  data GS_CHANGE_DATA type ZWSBPMCUST_UPDATE_DATA_REQ .
  data:
    gt_check_attr TYPE TABLE OF gst_check_attr .
  data:
    gt_addr_reply type table of gst_addr .

  methods SET_ORG_EXT .
  methods SET_PARTNER_ADDRESS
    importing
      !IV_PARTNER type BU_PARTNER .
  methods UPDATE_ORG .
  methods UPDATE_PARTNER_DATA
    importing
      !IV_PARTNER type BU_PARTNER
      !IV_TYPE type BU_TYPE .
  methods UPDATE_PERSON .
  methods IS_ERROR
    importing
      !IT_BAPIRET type BAPIRET2_TAB
    returning
      value(RV_RESULT) type ABAP_BOOL .
  methods SET_X_STRUCT
    importing
      !IS_STRUCT type ANY
    changing
      !CS_STRUCT_X type ANY .
  methods SET_PERSON_EXT
    importing
      !IV_PARTNER type BU_PARTNER .
  methods SET_BP_ADDRESS_EXT
    importing
      !IV_PARTNER type BU_PARTNER .
  methods APPEND_MESSAGE
    importing
      !IV_MESSAGE type ANY .
  methods PROCESS_MA .
  methods SET_MA_ATTR .
  methods SET_PARTNER_IDENT
    importing
      !IV_PARTNER type BU_PARTNER .
  methods UPDATE_PARTNER_REL
    importing
      !IV_PARTNER type BU_PARTNER .
  methods CHECK_PARTNER
    importing
      !IV_PARTNER type BU_PARTNER
    returning
      value(RV_RESULT) type ABAP_BOOL .
  methods READ_CURRENT_DATA .
  methods PROCESS_DATA
    importing
      !IV_PARTNER type BU_PARTNER
    returning
      value(RV_RESULT) type ABAP_BOOL .
  methods READ_PERSON_DATA .
  methods READ_ORG_DATA .
  methods READ_ADDRESS .
  methods READ_RELATIONS .
  methods UPDATE_DATA .
  methods SET_INDUSTRY_CODE .
  methods CHECK_MA .
  methods UPDATE_MA
    importing
      !IV_PARTNER_GUID type BU_PARTNER_GUID
      !IV_FCODE type CHAR1
      !IV_TEMPL type CRMT_PROF_TEMPLATE
      !IT_ATTR type CRMT_MKTPROF_COMW_T .
  methods PREPARE_MA .
  methods ADD_ADDR
    importing
      !IV_COMM_TYPE type CHAR3 optional
      !IS_ADDRESS type BAPIBUS1006_ADDRESS
      !IS_COMMUNICATIONS type ZWSBPMCUST_UPDATE_DATA_COMM_T optional
      !IV_ADDR_TYPE type CHAR10 optional
    exporting
      !EV_ADDR_GUID type SYSUUID_C .
ENDCLASS.



CLASS ZWSCL_BPMCUSTOMER_UPDATE IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->ADD_ADDR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_COMM_TYPE                   TYPE        CHAR3(optional)
* | [--->] IS_ADDRESS                     TYPE        BAPIBUS1006_ADDRESS
* | [--->] IS_COMMUNICATIONS              TYPE        ZWSBPMCUST_UPDATE_DATA_COMM_T(optional)
* | [--->] IV_ADDR_TYPE                   TYPE        CHAR10(optional)
* | [<---] EV_ADDR_GUID                   TYPE        SYSUUID_C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_addr.
    DATA: lt_adtel          TYPE bapiadtel_t,
          ls_adtel          TYPE bapiadtel,
          lt_adsmtp         TYPE bapiadsmtp_t,
          ls_adsmtp         TYPE bapiadsmtp,
          lt_fax            TYPE  bapiadfax_t,
          ls_fax            TYPE  bapiadfax,
          ls_address        TYPE bapibus1006_address,
          lt_return         TYPE bapiret2_t,
          ls_communications TYPE zwsbpmcust_update_data_comm_t.

    DATA: ls_adduse   TYPE bapibus1006_addressusage,
          lt_adduse   TYPE bapibus1006_addressusage_t,
          ls_adduse_x TYPE bapibus1006_addressusage_x,
          lt_adduse_x TYPE bapibus1006_addressusage_x_t.

    ls_address = is_address.
    ls_communications  = is_communications.
    DATA lv_guid TYPE sysuuid_c .
    DATA:lv_is_empty TYPE abap_bool.

    "тип адреса  установить
    ls_adduse-addresstype = CONV bu_adrkind( iv_addr_type ).
    APPEND ls_adduse TO lt_adduse.

    CASE iv_comm_type.
*Стандартный
      WHEN zif_pega_bpm_const=>gs_comm_type-standard_phone .
        ls_adtel-r_3_user = zif_partner_main_attr_const=>gs_phone_type-standard .
        ls_adtel-country = ls_communications-phone_country_code.
        ls_adtel-telephone = ls_communications-telephone.
        APPEND ls_adtel TO lt_adtel.
*Мобильный
      WHEN zif_pega_bpm_const=>gs_comm_type-mobile_phone.
        ls_adtel-r_3_user = zif_partner_main_attr_const=>gs_phone_type-mobile.
        ls_adtel-telephone = ls_communications-telephone.
        APPEND ls_adtel TO lt_adtel.
*Домашний
      WHEN zif_pega_bpm_const=>gs_comm_type-home_phone.
*        ls_fax-r_3_user = '2'.
        ls_fax-fax = ls_communications-telephone.
        APPEND ls_fax TO lt_fax.
* Email
      WHEN zif_pega_bpm_const=>gs_comm_type-email.
        ls_adsmtp-e_mail = ls_communications-email.
        APPEND ls_adsmtp TO lt_adsmtp.
      WHEN OTHERS.
        lv_is_empty  = abap_true.
    ENDCASE.

    IF lv_is_empty EQ abap_true.

      CALL FUNCTION 'BAPI_BUPA_ADDRESS_ADD'
        EXPORTING
          businesspartner = gs_partner-partner
          addressdata     = ls_address
        IMPORTING
          addressguid     = lv_guid
        TABLES
          addressusage    = lt_adduse
          return          = lt_return.
    ELSE.
      CALL FUNCTION 'BAPI_BUPA_ADDRESS_ADD'
        EXPORTING
          businesspartner = gs_partner-partner
          addressdata     = ls_address
        IMPORTING
          addressguid     = lv_guid
        TABLES
          bapiadtel       = lt_adtel
          bapiadfax       = lt_fax
          bapiadsmtp      = lt_adsmtp
          addressusage    = lt_adduse
          return          = lt_return.

    ENDIF.
    ev_addr_guid = lv_guid.
    IF is_error( lt_return ).
      MESSAGE e003(zcrm_int_mess) INTO DATA(lv_dummy).
      append_message( lv_dummy  ).
      gr_log->add_bapiret_tab( lt_return ).
      gv_no_save = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->APPEND_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_MESSAGE                     TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD append_message.


    APPEND VALUE bapiret2( type = sy-msgty
                           number = sy-msgno
                           id = sy-msgid
                           message_v1 = sy-msgv1
                           message_v2 = sy-msgv2
                           message_v3 = sy-msgv3
                           message_v4 = sy-msgv4
                           message = iv_message
      ) TO gt_messages.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->CHECK_MA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_ma.
    FIELD-SYMBOLS:  <ls_att_old> TYPE zst_ma_bp_info.
    prepare_ma( ).

    IF gt_check_attr IS NOT INITIAL.

      LOOP AT gt_check_attr   ASSIGNING  FIELD-SYMBOL(<ls_att_new>)."new ma

        READ TABLE  gt_ma_attr ASSIGNING <ls_att_old> WITH KEY ma_profil = <ls_att_new>-templ "old
                                                              ma_name = <ls_att_new>-atname.
        IF sy-subrc EQ 0.
          IF <ls_att_old>  EQ <ls_att_new>-atwrt.
          ELSE.
            IF <ls_att_new>-atwrt IS INITIAL OR <ls_att_new>-atwrt EQ ''.
              <ls_att_new>-fcode = 'D'. "delete
            ELSE.
              <ls_att_new>-fcode = 'C'.
            ENDIF.
          ENDIF.
        ELSE.
          <ls_att_new>-fcode = 'B'.
        ENDIF.

      ENDLOOP.

    ELSE.
      gv_no_save = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->CHECK_PARTNER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* | [<-()] RV_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_partner.

    DATA lt_return TYPE bapiret2_t.
    CALL FUNCTION 'BUPA_NUMBERS_GET'
      EXPORTING
        iv_partner = iv_partner
      IMPORTING
        es_but000  = gs_partner
      TABLES
        et_return  = lt_return.

    IF gs_partner-partner_guid IS INITIAL.

      IF is_error( lt_return ).
        gr_log->add_bapiret_tab( lt_return ).
      ENDIF.

      rv_result  = abap_true.
      gv_no_save = abap_true.

      RETURN.
    ENDIF.


    " Блокировка партнера
    CALL FUNCTION 'BUPA_ENQUEUE'
      EXPORTING
        iv_partner      = gs_partner-partner
      TABLES
        et_return       = lt_return
      EXCEPTIONS
        blocked_partner = 1
        OTHERS          = 2.

    IF sy-subrc <> 0 OR lt_return IS NOT INITIAL.
      gv_no_save = abap_true.
      gr_log->add_bapiret_tab( lt_return ).
    ELSE.
      rv_result  = abap_false.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->IS_ERROR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_BAPIRET                     TYPE        BAPIRET2_TAB
* | [<-()] RV_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_error.
    LOOP AT it_bapiret TRANSPORTING NO FIELDS WHERE type CA 'EAX'.
      rv_result = abap_true.
      EXIT.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->PREPARE_MA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD prepare_ma.
    DATA: ls_attributes TYPE gst_check_attr.

    IF gs_partner-type EQ zif_partner_main_attr_const=>gs_bp_type-organisation.
*Добавляем атрибуты ZMARKUL
      ls_attributes-templ = zif_mkt_attr_const=>set-markul.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-ustfond.
      ls_attributes-atwrt = conv atwrt( gs_change_data-org_data-fund_amount ).
      APPEND  ls_attributes TO  gt_check_attr[] .
      CLEAR ls_attributes.

    ELSEIF gs_partner-type EQ zif_partner_main_attr_const=>gs_bp_type-person.

*атрибуты ZFAMILY
*Семейное положение
      ls_attributes-templ = zif_mkt_attr_const=>set-family.
      ls_attributes-atname = zif_mkt_attr_const=>attr-marit_status.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-marital_status ).
      APPEND  ls_attributes TO  gt_check_attr[] .
      CLEAR ls_attributes.
*Наличие детей
      ls_attributes-templ = zif_mkt_attr_const=>set-family.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-child.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-has_child ).
      APPEND  ls_attributes TO  gt_check_attr[] .
      CLEAR ls_attributes.
      " zemployee
*Общий стаж работы
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-allempl.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-full_work_experience ).
      APPEND  ls_attributes TO  gt_check_attr[] .
      CLEAR ls_attributes.
*Непрерывный трудовой стаж в годах
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-emp_all.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-work_experience ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Срок работы в организации
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-emp_dur.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-duration_of_work ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
*Вид деятельности организации
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-emp_industry.
      ls_attributes-atwrt = conv atwrt(  gs_change_data-person_data-employer_industry ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Наименование организации
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-emp_name.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-employer_name ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Тип занятости
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-emp_type.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-empl_type ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Кол-во работников
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-emp_num.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-employee_number ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
*Должность
      ls_attributes-templ = zif_mkt_attr_const=>set-employee.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-function.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-function ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.


*атрибуты ZCHANGEFIO
*Дата изменения данных
      ls_attributes-templ = zif_mkt_attr_const=>set-changefio.
      ls_attributes-atname = zif_mkt_attr_const=>attr-date_change_fio.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-change_name_date ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Предыдущая фамилия
      ls_attributes-templ = zif_mkt_attr_const=>set-changefio.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-last_fam_name.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-previous_last_name ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Предыдущее имя
      ls_attributes-templ = zif_mkt_attr_const=>set-changefio.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-last_name.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-previous_first_name ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Предыдущее отчество
      ls_attributes-templ = zif_mkt_attr_const=>set-changefio.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-last_f_name.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-previous_middlename ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
*Причина изменения текст
      ls_attributes-templ = zif_mkt_attr_const=>set-changefio.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-reason_change_fio.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-reason_text ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.


*  ZEDUCATION
*Образование
      ls_attributes-templ = zif_mkt_attr_const=>set-education.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-education.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-education ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
*ВУЗ
      ls_attributes-templ = zif_mkt_attr_const=>set-education.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-university.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-education_institution ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
*Курс
      ls_attributes-templ = zif_mkt_attr_const=>set-education.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-grade.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-grade ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.


*  ZDEBIT
*Подтвержденные доходы
      ls_attributes-templ = zif_mkt_attr_const=>set-debit.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-debit.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-approved_income ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
*поступления на карту
      ls_attributes-templ = zif_mkt_attr_const=>set-debit.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-debit_plast.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-income_card ) .
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Дополнительные доходы
      ls_attributes-templ = zif_mkt_attr_const=>set-debit.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-debit_add.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-additional_income ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Периодические расходы
      ls_attributes-templ = zif_mkt_attr_const=>set-debit.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-debit_reg.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-periodical_expenses ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.

*Доход семьи
      ls_attributes-templ = zif_mkt_attr_const=>set-debit.
      ls_attributes-atname =  zif_mkt_attr_const=>attr-debit_all.
      ls_attributes-atwrt = conv atwrt( gs_change_data-person_data-family_income ).
      APPEND  ls_attributes TO  gt_check_attr .
      CLEAR ls_attributes.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->PROCESS_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* | [<-()] RV_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD process_data.

    IF check_partner( iv_partner = iv_partner ) EQ abap_false.

      read_current_data( ).

      update_data( ).

      rv_result = abap_true.
    ELSE.
      rv_result = abap_false.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->PROCESS_MA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD process_ma.

    DATA: lt_attributes   TYPE  crmt_mktprof_comw_t,

          lt_attributes_c TYPE  crmt_mktprof_comw_t,

          lt_attributes_d TYPE  crmt_mktprof_comw_t,
          ls_attributes   TYPE crmt_mktprof_comw.

    DATA: lt_return TYPE bapiret2_t,
          ls_return TYPE bapiret2.
    DATA: ls_check_attr TYPE gst_check_attr.
    DATA lv_id TYPE i.

    CHECK gt_check_attr IS NOT INITIAL.

    SORT gt_check_attr BY templ ASCENDING.

    READ TABLE gt_check_attr INTO DATA(ls_curr1) INDEX 1.
    LOOP AT gt_check_attr INTO ls_check_attr.
      CLEAR : ls_attributes.
      IF ls_curr1-templ EQ ls_check_attr-templ .
        CASE ls_check_attr-fcode.
          WHEN 'B' OR 'C'.
            MOVE-CORRESPONDING ls_check_attr TO ls_attributes.
            APPEND  ls_attributes TO  lt_attributes_c .
          WHEN 'D'.
            MOVE-CORRESPONDING ls_check_attr TO ls_attributes.
            APPEND  ls_attributes TO  lt_attributes_d .
          WHEN OTHERS.
        ENDCASE.
      ELSE.

        IF lt_attributes_c IS NOT INITIAL.
          update_ma( iv_partner_guid = gs_partner-partner_guid iv_templ = ls_curr1-templ iv_fcode = 'C' it_attr = lt_attributes_c ).
        ENDIF.

        IF lt_attributes_d IS NOT INITIAL.
          update_ma( iv_partner_guid = gs_partner-partner_guid iv_templ = ls_curr1-templ iv_fcode = 'D' it_attr = lt_attributes_d ).
        ENDIF.

        CLEAR: lt_attributes_d, lt_attributes_c, ls_curr1.
        MOVE-CORRESPONDING  ls_check_attr TO ls_curr1.

        CASE ls_check_attr-fcode.
          WHEN 'B' OR 'C'.
            MOVE-CORRESPONDING ls_check_attr TO ls_attributes.
            APPEND  ls_attributes TO  lt_attributes_c .
          WHEN 'D'.
            MOVE-CORRESPONDING ls_check_attr TO ls_attributes.
            APPEND  ls_attributes TO  lt_attributes_d .
          WHEN OTHERS.
        ENDCASE.

      ENDIF.

    ENDLOOP.




  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->READ_ADDRESS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_address.

    DATA: lt_return          TYPE bapiret2_tab,
          lt_addr            TYPE TABLE OF bapibus1006_addresses_int,

          lt_addrnumber_guid TYPE TABLE OF  bus_addrnumber_guid,
          ls_addrnumber_guid TYPE  bus_addrnumber_guid,
          lt_addruse         TYPE TABLE OF  bus021,

          ls_communication   TYPE  zwsbpmcust_update_data_comm_t
          .


    DATA: ls_address     TYPE bapibus1006_address,
          lt_adtel       TYPE TABLE OF bapiadtel,
          lt_adsmtp      TYPE TABLE OF bapiadsmtp,
          lt_adfax       TYPE TABLE OF  bapiadfax,
          lt_ad_rem      TYPE TABLE OF bapiad_rem,
          lt_adurl       TYPE TABLE OF bapiaduri,
          ls_bus020_ext  TYPE bus020_ext,

          ls_ext_address TYPE  zst_crmt_bupa_il_address.


    CALL FUNCTION 'BUA_ADDRESS_GET_ALL'
      EXPORTING
        i_partner         = gs_partner-partner
      TABLES
        t_addrnumber_guid = lt_addrnumber_guid
        t_addruse         = lt_addruse
      EXCEPTIONS
        no_address_found  = 1
        wrong_parameters  = 2
        internal_error    = 3
        date_invalid      = 4
        not_valid         = 5
        partner_blocked   = 6
        OTHERS            = 7.

    CHECK lt_addruse IS NOT INITIAL.

    LOOP AT lt_addruse INTO DATA(ls_addruse) .

      CLEAR: ls_address, lt_adtel, lt_adsmtp, lt_adurl, lt_return.

      APPEND INITIAL LINE TO gs_current_partner-address_tab ASSIGNING FIELD-SYMBOL(<ls_address_tab>).

      READ TABLE lt_addrnumber_guid   INTO ls_addrnumber_guid WITH  KEY addrnumber = ls_addruse-addrnumber.
      IF sy-subrc EQ 0.
*        Тип адреса
        <ls_address_tab>-type = ls_addruse-adr_kind.

        CALL FUNCTION 'BUPA_ADDRESS_GET_DETAIL'
          EXPORTING
            iv_partner    = gs_partner-partner
            iv_addrnumber = ls_addruse-addrnumber
          IMPORTING
            es_address    = ls_address
          TABLES
            et_adtel      = lt_adtel
            et_adfax      = lt_adfax
            et_adsmtp     = lt_adsmtp
            et_aduri      = lt_adurl
            et_ad_rem     = lt_ad_rem
            et_return     = lt_return.

        CALL FUNCTION 'ZFM_EXT_ADDR_READ'
          EXPORTING
            iv_address_guid = CONV bu_address_guid_bapi( ls_addrnumber_guid-address_guid )
          IMPORTING
            es_ext_address  = ls_ext_address.

*        Номер адреса
        <ls_address_tab>-ADDR_GUID = ls_addrnumber_guid-address_guid.
*        Страна
        <ls_address_tab>-country = ls_address-country.

*        Область
        <ls_address_tab>-region = ls_address-region.

*        Город
        <ls_address_tab>-city = ls_address-city.

*        Район
        <ls_address_tab>-district = ls_ext_address-zzdistr.

*        Индекс
        <ls_address_tab>-postal_code = ls_address-postl_cod1.

*        Улица
        <ls_address_tab>-street = ls_address-street.

*        Номер Дома
        <ls_address_tab>-house = ls_address-house_no.

*        Квартира (офис)
        <ls_address_tab>-room = ls_address-room_no.


*         Если адрес стандартный
        IF ls_addruse-adr_kind  EQ zif_addr_types_const=>default.

*           Стандартный
          ls_communication-telephone = VALUE #( lt_adtel[ r_3_user = zif_partner_main_attr_const=>gs_phone_type-standard ]-telephone OPTIONAL ).
          IF ls_communication-telephone IS NOT INITIAL.
            ls_communication-type = zif_pega_bpm_const=>gs_comm_type-standard_phone.
            ls_communication-phone_country_code = VALUE #( lt_adtel[ r_3_user = zif_partner_main_attr_const=>gs_phone_type-standard ]-country OPTIONAL ).
            APPEND ls_communication TO gs_current_partner-communications_tab.
          ENDIF.

          CLEAR ls_communication.
*           Домашний  берем из FAX
          ls_communication-telephone = VALUE #( lt_adfax[ 1 ]-fax OPTIONAL ).
          IF ls_communication-telephone IS NOT INITIAL.
            ls_communication-type = zif_pega_bpm_const=>gs_comm_type-home_phone.
            ls_communication-phone_country_code = VALUE #( lt_adfax[ 1 ]-country OPTIONAL ).
            APPEND ls_communication TO gs_current_partner-communications_tab.
          ENDIF.


          CLEAR ls_communication.
*           Мобильный
          ls_communication-telephone = VALUE #( lt_adtel[ r_3_user = zif_partner_main_attr_const=>gs_phone_type-mobile ]-telephone OPTIONAL ).
          IF ls_communication-telephone IS NOT INITIAL.
            ls_communication-type = zif_pega_bpm_const=>gs_comm_type-mobile_phone.
            ls_communication-phone_country_code = VALUE #( lt_adtel[ r_3_user = zif_partner_main_attr_const=>gs_phone_type-mobile ]-telephone OPTIONAL ).
            APPEND ls_communication TO gs_current_partner-communications_tab.
          ENDIF.



          CLEAR ls_communication.
*          Email
          ls_communication-email = VALUE #( lt_adsmtp[ 1 ]-e_mail OPTIONAL ).
          IF ls_communication-email IS NOT INITIAL.
            ls_communication-type = zif_pega_bpm_const=>gs_comm_type-email.
            APPEND ls_communication TO gs_current_partner-communications_tab.
          ENDIF.


          CLEAR ls_communication.
        ENDIF.
      ENDIF.

    ENDLOOP.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->READ_CURRENT_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_current_data.

    DATA: lt_tax TYPE TABLE OF bus_tax.

    CALL FUNCTION 'BUPA_TAXNUMBERS_GET'
      EXPORTING
        iv_partner    = gs_partner-partner
      TABLES
        et_taxdetails = lt_tax
      EXCEPTIONS
        OTHERS        = 2.

    gt_tax_num = lt_tax.


    CALL FUNCTION 'BUPA_IDENTIFICATIONDETAILS_GET'
      EXPORTING
        iv_partner              = gs_partner-partner
      TABLES
        et_identificationdetail = gt_identification.

    gs_zdata = zcl_bp_general_ext=>get_data( gs_partner-partner ).

*        Поиск МА на деловом партнере
    gt_ma_attr = zcl_help_tools=>read_ma_from_bp( iv_partner_guid = gs_partner-partner_guid    ).

*    Тип клиента
    gs_current_partner-client_type = gs_zdata-zztype_kl.

    CASE gs_partner-type.
*        Физ. лицо
      WHEN zif_partner_main_attr_const=>gs_bp_type-person.
        read_person_data( ).
*        Юр. лицо
      WHEN zif_partner_main_attr_const=>gs_bp_type-organisation.
        read_org_data( ).
      WHEN OTHERS.
    ENDCASE.

    read_address( ).


    read_relations( ).


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->READ_ORG_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_org_data.

    DATA: lt_return TYPE bapiret2_tab.

    DATA: ls_data_organ TYPE bapibus1006_central_organ,
          ls_data       TYPE bapibus1006_central,
          ls_ma_attr    TYPE zst_ma_bp_info,
          lt_longtext   TYPE comt_text_textdata_t,
          ls_longtext   TYPE comt_text_textdata.

    CALL FUNCTION 'BUPA_CENTRAL_GET_DETAIL'
      EXPORTING
        iv_partner    = gs_partner-partner
      IMPORTING
        es_data       = ls_data
        es_data_organ = ls_data_organ
      TABLES
        et_return     = lt_return.

    CALL FUNCTION 'BUPA_LONGTEXT_READ'
      EXPORTING
        iv_partner  = gs_partner-partner
      IMPORTING
        et_longtext = lt_longtext
        et_return   = lt_return.

**   Наименование

    CONCATENATE ls_data_organ-name1
                ls_data_organ-name2
                ls_data_organ-name3
           INTO gs_current_partner-org_data-org_name .

*   Сокращенное наименование
    gs_current_partner-org_data-short_name = gs_zdata-zzorg_short.

*  Организационно-правовая форма
    gs_current_partner-org_data-org_form   = gs_zdata-zzorg_form.

*   Уставом разрешена торговля
    gs_current_partner-org_data-sales_permission  = gs_zdata-zzsale_perm.

*   Форма собственности
    gs_current_partner-org_data-legal_form   = gs_zdata-zzown.

*    Резидент
    gs_current_partner-org_data-is_resident   = gs_zdata-zzresident.

*    Страна регистрации
    gs_current_partner-org_data-registration_country = gs_zdata-zzreg_country.

*    ИНН
    gs_current_partner-org_data-inn =  VALUE #( gt_tax_num[ tax_type = zif_tax_const=>inn ]-tax_number OPTIONAL ).

*   Код адреса
    gs_current_partner-org_data-address_code = gs_zdata-zzaddr_code.

*   Код юридического лица
    gs_current_partner-org_data-org_code = gs_zdata-zzul_code.

*   Система классификации (ОКЭД)
    gs_current_partner-org_data-oked =  zcl_ztd_bp_oked_ext=>get_codes_default( iv_partner = gs_partner-partner ).

*    Орган управления
    gs_current_partner-org_data-government   = gs_zdata-zzgovernment.

*   Дата регистрации
    gs_current_partner-org_data-foundation_date   = ls_data_organ-foundationdate.

*   Класс кредитоспособности
    gs_current_partner-org_data-credit_class  = gs_zdata-zzcred_class.

*   Код налоговой
    gs_current_partner-org_data-tax_office_code = gs_zdata-zztax_office.

*   код отрасли(старый для миграции)
    READ TABLE lt_longtext INTO ls_longtext WITH  KEY stxh-tdid = zif_partner_main_attr_const=>gs_text_type-industry_code.
    IF sy-subrc EQ 0.

      CALL FUNCTION 'CONV_ITF_TO_TEXTSTRING'
        EXPORTING
          it_itf        = ls_longtext-lines    " Text Lines
        IMPORTING
          ev_textstring = gs_current_partner-org_data-industry_code.

    ENDIF.

*    Какой счет открывается (вторичный или первичный)
    gs_current_partner-org_data-account_type = gs_zdata-zzbill_type.

*    Сумма уставного фонда в сумах
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-ustfond.
    IF sy-subrc EQ 0.
      gs_current_partner-org_data-fund_amount = ls_ma_attr-ma_value.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->READ_PERSON_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_person_data.

    DATA: lt_return TYPE bapiret2_tab.

    DATA: ls_data_person TYPE bapibus1006_central_person,
          ls_data        TYPE bapibus1006_central,
          lt_ma_attr     TYPE ztt_ma_bp_info,
          ls_ma_attr     TYPE zst_ma_bp_info.

    CALL FUNCTION 'BUPA_CENTRAL_GET_DETAIL'
      EXPORTING
        iv_partner     = gs_partner-partner
      IMPORTING
        es_data        = ls_data
        es_data_person = ls_data_person
      TABLES
        et_return      = lt_return.


*   Фамилия (кириллица или лат)
    gs_current_partner-person_data-last_name = ls_data_person-lastname.

*    Имя (кириллица или лат)
    gs_current_partner-person_data-first_name = ls_data_person-firstname.

*    Отчество (кириллица или лат)
    gs_current_partner-person_data-middle_name = ls_data_person-middlename.

*    Национальность
    gs_current_partner-person_data-nationality = ls_data_person-nationality.

*   Статус трудоспособности
    gs_current_partner-person_data-work_ability = gs_zdata-zzkrfl.

*   Резидентнт
    gs_current_partner-person_data-is_resident = gs_zdata-zzresident.

*    Гражданство
    gs_current_partner-person_data-citizenship  = ls_data_person-countryorigin.

*   Пол
    gs_current_partner-person_data-sex   = ls_data_person-sex.

*    Место рождения
    gs_current_partner-person_data-birthplace  = ls_data_person-birthplace.

*    Клиент в черном списке
    gs_current_partner-person_data-black_list  = gs_zdata-zzblacklist.

*    Дата до (по черному списку )
    gs_current_partner-person_data-black_list_date_to  = gs_zdata-zzbl_date.

*    Класс кредитоспособности
    gs_current_partner-person_data-cred_class =   gs_zdata-zzcred_class.

*    Предыдущая фамилия
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-last_fam_name.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-previous_last_name = ls_ma_attr-ma_value.
    ENDIF.

*    Предыдущее имя
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-last_name.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-previous_first_name = ls_ma_attr-ma_value.
    ENDIF.

*    Предыдущее отчество
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-last_f_name.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-previous_middlename = ls_ma_attr-ma_value.
    ENDIF.

*    Дата изменения
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-date_change_fio.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-change_name_date = ls_ma_attr-ma_value.
    ENDIF.

*    Причина изменения: брак
    READ TABLE lt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-brak.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-reason_marriage = ls_ma_attr-ma_value.
    ENDIF.

*    Причина изменения текст
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-reason_change_fio.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-reason_text = ls_ma_attr-ma_value.
    ENDIF.

*    Образование
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-education.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-education = ls_ma_attr-ma_value.
    ENDIF.

*    ВУЗ
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-university.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-education_institution = ls_ma_attr-ma_value.
    ENDIF.

*    Курс
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-grade.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-grade = ls_ma_attr-ma_value.
    ENDIF.

*    Семейное положение
*    gs_current_partner-person_data-marital_status = ls_data_person-maritalstatus.
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-marit_status.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-marital_status = ls_ma_attr-ma_value.
    ENDIF.

*    Наличие детей
*    gs_current_partner-person_data-has_child  = gs_zdata-zzchild.
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-child.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-has_child = ls_ma_attr-ma_value.
    ENDIF.

*    Тип занятости
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-emp_type.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-empl_type = ls_ma_attr-ma_value.
    ENDIF.

*    Наименование организации
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-emp_name.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-employer_name = ls_ma_attr-ma_value.
    ENDIF.

*    Вид деательности организации
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-emp_industry.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-employer_industry = ls_ma_attr-ma_value.
    ENDIF.

*    Должность
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-function.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-function = ls_ma_attr-ma_value.
    ENDIF.

*    Кол-во работников
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-emp_num.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-employee_number = ls_ma_attr-ma_value.
    ENDIF.

*    Срок работы в организации
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-emp_dur.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-duration_of_work = ls_ma_attr-ma_value.
    ENDIF.

*    Непрерывный трудовой стаж в годах
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-emp_all.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-work_experience = ls_ma_attr-ma_value.
    ENDIF.

*    Количество мест работы за последние 3 года
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-num_empl.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-jobs_number = ls_ma_attr-ma_value.
    ENDIF.

*    Общий стаж работы
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-allempl.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-full_work_experience = ls_ma_attr-ma_value.
    ENDIF.

*    Подтвержденные доходы
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-debit.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-approved_income = ls_ma_attr-ma_value.
    ENDIF.

*    Поступления на карту
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-debit_plast.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-income_card = ls_ma_attr-ma_value.
    ENDIF.

*    Дополнительные доходы
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-debit_add.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-additional_income = ls_ma_attr-ma_value.
    ENDIF.

*    Периодические расходы
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-debit_reg.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-periodical_expenses = ls_ma_attr-ma_value.
    ENDIF.

*    Доход семьи
    READ TABLE gt_ma_attr INTO ls_ma_attr WITH KEY ma_name = zif_mkt_attr_const=>attr-debit_all.
    IF sy-subrc EQ 0.
      gs_current_partner-person_data-family_income = ls_ma_attr-ma_value.
    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->READ_RELATIONS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_relations.

    DATA(lt_rel) = zcl_help_tools=>get_relations_one_partner( iv_partner = gs_partner-partner ).

    LOOP AT lt_rel INTO DATA(ls_rel).

      APPEND INITIAL LINE TO gs_current_partner-relations_tab ASSIGNING FIELD-SYMBOL(<ls_relations_tab>).
      <ls_relations_tab>-relation_type = ls_rel-zreltyp.
      <ls_relations_tab>-id_crm = ls_rel-partner.

    ENDLOOP.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_BP_ADDRESS_EXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_bp_address_ext.

    DATA: lt_addresses    TYPE TABLE OF bapibus1006_addresses_int,
          ls_ext_address  TYPE zst_crmt_bupa_il_address,
          lv_address_guid TYPE bu_address_guid_bapi.



    CALL FUNCTION 'BUPA_ADDRESSES_GET'
      EXPORTING
        iv_partner   = iv_partner
      TABLES
        et_addresses = lt_addresses.

    IF NOT line_exists( lt_addresses[ standardaddress = abap_true ] ).
      MESSAGE e010(zcrm_int_mess) INTO DATA(lv_dummy).
      append_message( lv_dummy ).
      gr_log->add_sy( ).
      RETURN.
    ENDIF.

    DATA(lv_addrguid) = VALUE #( lt_addresses[ standardaddress = abap_true ]-addrguid OPTIONAL ).

    LOOP AT gs_change_data-address_tab INTO DATA(ls_address_new).
      READ TABLE gs_current_partner-address_tab INTO DATA(ls_address_old) WITH KEY district = ls_address_new-district .

      IF sy-subrc NE 0.
        ls_ext_address-zzdistr = ls_address_new-district.

        CALL FUNCTION 'ZFM_EXT_ADDR_MODIFY'
          EXPORTING
            iv_address_guid = lv_address_guid
            is_ext_address  = ls_ext_address
            iv_with_commit  = abap_false.
      ENDIF.

      IF sy-subrc <> 0.
        MESSAGE e015(zcrm_int_mess) INTO lv_dummy.
        append_message( lv_dummy ).
        gr_log->add_sy( ).
        gv_no_save = abap_true.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_INDUSTRY_CODE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_industry_code.

    DATA: lt_return TYPE bapiret2_t,
          ls_return TYPE bapiret2.
    DATA: lt_longtext     TYPE  comt_text_textdata_t,
          lt_longtext_new TYPE    comt_text_lines_t.

    DATA:lv_indcode TYPE string.
    DATA: ls_header TYPE thead.
*
*    CALL FUNCTION 'BUPA_LONGTEXT_READ'
*      EXPORTING
*        iv_partner  = gs_partner-partner
**       IV_PARTNER_GUID       =
*      IMPORTING
*        et_longtext = lt_longtext
**       ET_TEXTID_DESCR       =
*      .
*
*    READ TABLE lt_longtext INTO DATA(ls_longtext) WITH  KEY stxh-tdid = zif_partner_main_attr_const=>gs_text_type-industry_code.
*    IF sy-subrc EQ 0.
*
*      CALL FUNCTION 'CONV_ITF_TO_TEXTSTRING'
*        EXPORTING
*          it_itf        = ls_longtext-lines    " Text Lines
*        IMPORTING
*          ev_textstring = lv_indcode.
*    ENDIF.
*
*    IF lv_indcode <> gs_change_data-org_data-industry_code.

    CALL FUNCTION 'CONV_TEXTSTRING_TO_ITF'
      EXPORTING
        iv_textstring = gs_change_data-org_data-industry_code
      IMPORTING
        et_itf        = lt_longtext_new.

    ls_header-tdid = zif_partner_main_attr_const=>gs_text_type-industry_code.
    ls_header-tdspras = sy-langu.
    ls_header-tdname = CONV tdobname( gs_partner-partner ).
    ls_header-tdobject = CONV tdobject( 'BUT000' ).

    CALL FUNCTION 'DELETE_TEXT'
      EXPORTING
*       CLIENT    = SY-MANDT
        id        = zif_partner_main_attr_const=>gs_text_type-industry_code
        language  = sy-langu
        name      = ls_header-tdname
        object    = ls_header-tdobject
*       savemode_direct = 'X'
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      MESSAGE e003(zcrm_int_mess) WITH sy-subrc INTO DATA(lv_dummy).
      append_message( lv_dummy ).
      gr_log->add_sy( ).
    ENDIF.

    CALL FUNCTION 'SAVE_TEXT'
      EXPORTING
*       CLIENT   = SY-MANDT
        header   = ls_header
        insert   = 'X'
*       savemode_direct = 'X'
      TABLES
        lines    = lt_longtext_new
      EXCEPTIONS
        id       = 1
        language = 2
        name     = 3
        object   = 4
        OTHERS   = 5.
    IF sy-subrc <> 0.
      MESSAGE e003(zcrm_int_mess) WITH sy-subrc INTO lv_dummy.
      append_message( lv_dummy  ).
      gr_log->add_sy( ).
    ENDIF.

* ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_MA_ATTR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD SET_MA_ATTR.

    check_ma( ).
    process_ma( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_ORG_EXT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_org_ext.

    DATA: ls_data   TYPE  ztab00000b_attr,
          ls_data_x TYPE ztab00000b_x,
          lt_return TYPE bapiret2_t,
          ls_return TYPE bapiret2.

    DATA: ls_oked	  TYPE ztd_bp_oked_attr,
          ls_oked_x	TYPE ztd_bp_oked_x.

    IF gs_current_partner-org_data-customer_type <> gs_change_data-client_type.
      ls_data-zztype_kl = gs_change_data-client_type.
      ls_data_x-zztype_kl  = abap_true.
    ENDIF.

*Сокращенное наименование
    IF gs_current_partner-org_data-short_name <> gs_change_data-org_data-short_name.
      ls_data-zzorg_short  = gs_change_data-org_data-short_name.
      ls_data_x-zzorg_short = abap_true.
    ENDIF.
*ОПФ
    IF gs_current_partner-org_data-legal_form <> gs_change_data-org_data-legal_form.
      ls_data-zzown = gs_change_data-org_data-legal_form.
      ls_data_x-zzown = abap_true.
    ENDIF.

*Орган управления
    IF gs_current_partner-org_data-government <> gs_change_data-org_data-government.
      gs_current_partner-org_data-government  = gs_change_data-org_data-government.
      ls_data_x-zzgovernment = abap_true.
    ENDIF.

*Организационно-правовая форма
    IF gs_current_partner-org_data-org_form <> gs_change_data-org_data-org_form.
      ls_data-zzorg_form = gs_change_data-org_data-org_form.
      ls_data_x-zzorg_form = abap_true.
    ENDIF.

*Уставом разрешена торговля
    IF gs_current_partner-org_data-sales_permission <> gs_change_data-org_data-sales_permission.
      ls_data-zzsale_perm = gs_change_data-org_data-sales_permission.
      ls_data_x-zzsale_perm = abap_true.
    ENDIF.

*Резидент
    IF gs_current_partner-org_data-is_resident <> gs_change_data-org_data-is_resident.
      ls_data-zzresident = gs_change_data-org_data-is_resident.
      ls_data_x-zzresident = abap_true .
    ENDIF.

*  Страна регистрации
    IF gs_current_partner-org_data-registration_country <> gs_change_data-org_data-registration_country.
      ls_data-zzreg_country = gs_change_data-org_data-registration_country.

      SELECT SINGLE landx
        FROM t005t
        INTO ls_data-zzreg_coun_text
        WHERE land1 = ls_data-zzreg_country
          AND spras = sy-langu.

      ls_data_x-zzreg_country = abap_true.
      ls_data_x-zzreg_coun_text = abap_true.
    ENDIF.

*ИНН
    IF gs_current_partner-org_data-inn <> gs_change_data-org_data-inn.

      CALL FUNCTION 'BUPA_TAX_CHANGE'
        EXPORTING
          iv_partner    = gs_partner-partner
          iv_tax_type   = zif_tax_const=>inn
          iv_tax_number = CONV bptaxnum( gs_change_data-org_data-inn )
*         IV_TAX_NUMBER_XL        =
*         IV_COMBINED_CHECK       = ' '
*         IV_X_SAVE     = 'X'
        TABLES
          ct_return     = lt_return.

      IF is_error( lt_return ) OR sy-subrc <> 0.
        MESSAGE e007(zcrm_int_mess) INTO DATA(lv_dummy).
        append_message( lv_dummy  ).

        gr_log->add_bapiret_tab( lt_return ).
      ENDIF.
    ENDIF.

*Код адреса
    IF gs_current_partner-org_data-address_code <> gs_change_data-org_data-address_code .
      ls_data-zzaddr_code = gs_change_data-org_data-address_code .
      ls_data_x-zzaddr_code = abap_true .
    ENDIF.

*Код юридического лица
    IF gs_current_partner-org_data-org_code <> gs_change_data-org_data-org_code.
      ls_data-zzul_code = gs_change_data-org_data-org_code.
      ls_data_x-zzul_code = abap_true.
    ENDIF.

*Система классификации (ОКЭД)

    IF gs_current_partner-org_data-oked <> gs_change_data-org_data-oked.
      ls_oked-zz_oked_code = gs_change_data-org_data-oked.
      ls_oked-zz_oked_code_def = 'X'.

      ls_oked_x-zz_oked_code = abap_true.
      ls_oked_x-zz_oked_code_def = abap_true.

      DATA(lv_oked_is_set) = zcl_ztd_bp_oked_ext=>set_code(
                                iv_partner = gs_partner-partner
                                iv_save    = 'X'
                                is_data    = ls_oked
                                is_data_x  = ls_oked_x
                            ).
      IF lv_oked_is_set NE abap_true.
        MESSAGE e014(zcrm_int_mess) INTO lv_dummy.
        append_message( lv_dummy  ).

      ENDIF.
    ENDIF.

*Класс кредитоспособности
    IF gs_current_partner-org_data-credit_class <> gs_change_data-org_data-credit_class.
      ls_data-zzcred_class = gs_change_data-org_data-credit_class.
      ls_data_x-zzcred_class = abap_true.
    ENDIF.


*Код налоговой
    IF gs_current_partner-org_data-tax_office_code <> gs_change_data-org_data-tax_office_code.
      ls_data-zztax_office =  gs_change_data-org_data-tax_office_code.
      ls_data_x-zztax_office = abap_true.
    ENDIF.

    DATA:lt_longtext TYPE comt_text_textdata_t.

*код отрасли(старый для миграции)

    IF gs_current_partner-org_data-industry_code <> gs_change_data-org_data-industry_code.
      set_industry_code(  ).
    ENDIF.

*Какой счет открывается (вторичный или первичный)
    IF gs_current_partner-org_data-account_type <> gs_change_data-org_data-account_type.
      ls_data-zzbill_type =  gs_change_data-org_data-account_type.
      ls_data_x-zzbill_type = abap_true.
    ENDIF.

    IF ls_data_x IS NOT INITIAL.

      zcl_bp_general_ext=>set_data(
       EXPORTING
         iv_partner = gs_partner-partner
         iv_save    = abap_false
         is_data    = ls_data
         is_data_x  = ls_data_x
         ).
    ENDIF.

    IF sy-subrc <> 0.
      MESSAGE e017(zcrm_int_mess) INTO DATA(lv_dummy_1).
      append_message( lv_dummy_1 ).
      gv_no_save = abap_true.
      gr_log->add_sy( ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_PARTNER_ADDRESS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_partner_address.

    DATA: lt_addrnumber_guid TYPE TABLE OF  bus_addrnumber_guid,
          ls_addrnumber_guid TYPE  bus_addrnumber_guid,
          lt_addruse         TYPE TABLE OF  bus021,
          ls_address         TYPE bapibus1006_address,
          ls_address_x       TYPE bapibus1006_address_x,

          lt_adtel           TYPE bapiadtel_t,
          ls_adtel           TYPE bapiadtel,
          lt_adtel_x         TYPE bapiadtelx_t,
          ls_adtel_x         TYPE bapiadtelx,

          lt_adsmtp          TYPE bapiadsmtp_t,
          ls_adsmtp          TYPE bapiadsmtp,
          lt_fax             TYPE  bapiadfax_t,
          ls_fax             TYPE  bapiadfax,

          ls_addr_reply      TYPE gst_addr,

          lv_create_com      TYPE abap_bool,
          lt_return          TYPE bapiret2_t.

    DATA: lv_addr_guid TYPE sysuuid_c.
    DATA: ls_adduse   TYPE bapibus1006_addressusage,
          lt_adduse   TYPE bapibus1006_addressusage_t,
          ls_adduse_x TYPE bapibus1006_addressusage_x,
          lt_adduse_x TYPE bapibus1006_addressusage_x_t.

    CALL FUNCTION 'BUA_ADDRESS_GET_ALL'
      EXPORTING
        i_partner         = gs_partner-partner
      TABLES
        t_addrnumber_guid = lt_addrnumber_guid
        t_addruse         = lt_addruse
      EXCEPTIONS
        no_address_found  = 1
        wrong_parameters  = 2
        internal_error    = 3
        date_invalid      = 4
        not_valid         = 5
        partner_blocked   = 6
        OTHERS            = 7.

    IF sy-subrc <> 0.
      MESSAGE e010(zcrm_int_mess) WITH sy-subrc INTO DATA(lv_dummy).
      append_message( lv_dummy ).
      gr_log->add_sy( ).
      RETURN.
    ENDIF.

    LOOP AT gs_change_data-address_tab INTO DATA(ls_address_input).

      READ TABLE lt_addruse INTO DATA(ls_addruse) WITH KEY
      adr_kind = CONV bu_adrkind( ls_address_input-type ).
*      addrnumber = CONV ad_addrnum( ls_address_input-addr_num ).
      IF sy-subrc EQ 0.
        READ  TABLE gs_current_partner-address_tab INTO DATA(ls_address_old)
       WITH  KEY type = CONV bu_adrkind( ls_address_input-type ).

        IF sy-subrc EQ 0."если есть такой тип адреса
          READ TABLE lt_addrnumber_guid   INTO ls_addrnumber_guid WITH  KEY addrnumber = ls_address_input-addr_guid.
          IF sy-subrc EQ 0.

            ls_addr_reply-addrguid = ls_addrnumber_guid-address_guid."номер адреса для передачи в ответ
            APPEND ls_addr_reply TO gt_addr_reply.
            CLEAR ls_addr_reply.

            ls_address-country = ls_address_input-country.
            ls_address_x-country = abap_true.

            IF ls_address_old-region <> ls_address_input-region.
              ls_address-region = ls_address_input-region.
              ls_address_x-region = abap_true.
            ENDIF.

            IF ls_address_old-city <> ls_address_input-city.
              ls_address-city = ls_address_input-city.
              ls_address_x-city = abap_true.
            ENDIF.

            IF ls_address_old-postal_code <> ls_address_input-postal_code.
              ls_address-postl_cod1 = ls_address_input-postal_code.
              ls_address_x-postl_cod1 = abap_true.
            ENDIF.

            IF ls_address_old-street <> ls_address_input-street .
              ls_address-street = ls_address_input-street.
              ls_address_x-street = abap_true.
            ENDIF.

            IF ls_address_old-house <> ls_address_input-house.
              ls_address-house_no = ls_address_input-house.
              ls_address_x-house_no = abap_true.
            ENDIF.

            IF ls_address_old-room <> ls_address_input-room.
              ls_address-room_no = ls_address_input-room.
              ls_address_x-room_no = abap_true.
            ENDIF.

*             Стандартный адрес
            IF ls_address_input-type EQ zif_addr_types_const=>default.
              LOOP AT gs_change_data-communications_tab INTO DATA(ls_communications).

                READ  TABLE gs_current_partner-communications_tab INTO DATA(ls_communication_old) WITH KEY type  = ls_communications-type.
                IF sy-subrc EQ 0.

                  CASE ls_communications-type.
*           Стандартный
                    WHEN zif_partner_main_attr_const=>gs_phone_type-standard.
                      IF ls_communication_old-telephone  <> ls_communications-telephone
                        AND ls_communication_old-phone_country_code <> ls_communications-phone_country_code .

                        ls_adtel-r_3_user = zif_partner_main_attr_const=>gs_phone_type-standard.
                        ls_adtel-country = ls_communications-phone_country_code.
                        ls_adtel-telephone = ls_communications-telephone.
                        APPEND ls_adtel TO lt_adtel.
                      ENDIF.

                    WHEN zif_pega_bpm_const=>gs_comm_type-mobile_phone.
                      IF ls_communication_old-telephone  <> ls_communications-telephone.
                        ls_adtel-r_3_user = zif_partner_main_attr_const=>gs_phone_type-mobile.
                        ls_adtel-telephone = ls_communications-telephone.
                        APPEND ls_adtel TO lt_adtel.
                      ENDIF.

                    WHEN zif_pega_bpm_const=>gs_comm_type-home_phone."Домашний
                      IF ls_communication_old-telephone  <> ls_communications-telephone.
*                        ls_fax-r_3_user = zif_pega_bpm_const=>gs_comm_type-home_phone.
                        ls_fax-fax = ls_communications-telephone.
                        APPEND ls_fax TO lt_fax.
                      ENDIF.
*          Email
                    WHEN zif_pega_bpm_const=>gs_comm_type-email .
                      IF ls_communication_old-email <> ls_communications-email.
*                        ls_adsmtp-r_3_user = zif_pega_bpm_const=>gs_comm_type-email .
                        ls_adsmtp-e_mail = ls_communications-email.
                        APPEND ls_adsmtp TO lt_adsmtp.
                      ENDIF.
                  ENDCASE.

                  CALL FUNCTION 'BUPA_ADDRESS_CHANGE'
                    EXPORTING
                      iv_partner   = iv_partner
                      iv_addrguid  = ls_addrnumber_guid-address_guid
                      is_address   = ls_address
                      is_address_x = ls_address_x
                  "   iv_x_save    = 'X'
                    TABLES
                      it_adtel     = lt_adtel
                      it_adfax     = lt_fax
                      it_adsmtp    = lt_adsmtp
                      et_return    = lt_return.

                  IF is_error( lt_return ).
                    MESSAGE e003(zcrm_int_mess) INTO lv_dummy.
                    append_message( lv_dummy  ).
                    gr_log->add_bapiret_tab( lt_return ).
                    gv_no_save = abap_true.
                  ENDIF.

                  CLEAR: lt_adtel, lt_adsmtp, lt_return, lt_fax.

                ELSE."если на стандартном адрессе не было комунникации
                  add_addr(
                     iv_comm_type = ls_communications-type
                     is_address = ls_address
                     is_communications = ls_communications
                     ).

                ENDIF."был ли этот вид коммуникации ранее
                CLEAR:  lt_adtel, lt_adsmtp, lt_return, lt_fax.
              ENDLOOP.
            ENDIF."default adress communications

          ENDIF. "если адрес с таким guid существует
        ENDIF."если есть такой адрес

      ELSE. "если адрес с таким номером не найден
        ls_address-country = ls_address_input-country.

        ls_address-region = ls_address_input-region.

        ls_address-city = ls_address_input-city.

        ls_address-postl_cod1 = ls_address_input-postal_code.

        ls_address-street = ls_address_input-street.

        ls_address-house_no = ls_address_input-house.

        ls_address-room_no = ls_address_input-room.

        IF ls_address_input-type EQ zif_addr_types_const=>default."если стандартный адрес пришел на вход
          ls_address-standardaddress = abap_true.
          READ  TABLE gs_current_partner-address_tab INTO DATA(ls_old_addr)"и он уже есть, но с другим номером
                  WITH  KEY type = zif_addr_types_const=>default.
          IF sy-subrc EQ 0.
            CLEAR lt_return.
            CALL FUNCTION 'BUPA_ADDRESS_REMOVE'
              EXPORTING
                iv_partner      = gs_partner-partner
                iv_partner_guid = gs_partner-partner_guid
                iv_addrguid     = CONV bu_address_guid( ls_old_addr-addr_guid )
              TABLES
                et_return       = lt_return.
            .
            IF is_error( lt_return ).
              MESSAGE e015(zcrm_int_mess) INTO lv_dummy.
              append_message( lv_dummy  ).
              gr_log->add_bapiret_tab( lt_return ).
              gv_no_save = abap_true.
            ENDIF.
          ENDIF.

        ENDIF.

        LOOP AT  gs_change_data-communications_tab INTO DATA(ls_communications_new).
          IF ls_address_input-type EQ zif_addr_types_const=>default."если адрес стандартный
            add_addr(
            EXPORTING
                             iv_addr_type  = ls_address_input-type
                             iv_comm_type = ls_communications_new-type
                             is_address = ls_address
                             is_communications = ls_communications_new
            IMPORTING
                             ev_addr_guid = lv_addr_guid
            ).
          ELSE."если адрес нестандартный

            add_addr(
          EXPORTING
                              iv_addr_type  = ls_address_input-type
                              is_address = ls_address
          IMPORTING
                              ev_addr_guid = lv_addr_guid
          ).
          ENDIF.

          IF sy-subrc  EQ 0 AND lv_addr_guid IS NOT INITIAL.
            CLEAR: lt_addrnumber_guid, lt_addruse.
            ls_addr_reply-addrguid = lv_addr_guid."номер адреса для передачи в ответ
            APPEND ls_addr_reply TO gt_addr_reply.
          ENDIF.
        ENDLOOP.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_PARTNER_IDENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_partner_ident.

    DATA: lv_dummy TYPE string.
    DATA lv_doc_type TYPE char6.
    DATA: lv_unique TYPE abap_bool.

    DATA: lt_return TYPE bapiret2_tab.
    DATA: lt_tb039  TYPE TABLE OF tb039,
          ls_tb039  TYPE tb039,
          lt_tb039a TYPE TABLE OF tb039a,
          ls_tb039a TYPE tb039a.

    CALL FUNCTION 'BUP_IDTYPES_GET'
      TABLES
        t_tb039   = lt_tb039
        t_tb039a  = lt_tb039a
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.

    "* Основной документ
    CHECK gs_change_data-documents_tab IS NOT INITIAL.

    LOOP AT gs_change_data-documents_tab ASSIGNING FIELD-SYMBOL(<ident>).

      CLEAR: lv_unique.
      CONCATENATE <ident>-serial '$' <ident>-id_number INTO DATA(lv_num)."серия и номер хранятся в бд в одном поле с разделителем $

      IF lt_tb039a IS NOT INITIAL AND lt_tb039a IS NOT INITIAL. "Проверяем документы на кардинальность 1 к 1
        READ TABLE lt_tb039a INTO ls_tb039a WITH KEY type = <ident>-type  .
        IF sy-subrc = 0.
          READ TABLE lt_tb039  INTO ls_tb039 WITH KEY category = ls_tb039a-category.
          IF  sy-subrc EQ 0.
            IF ls_tb039-one_id_per_bp EQ 'X'..
              lv_unique = abap_true.
            ENDIF.
          ELSE.
            lv_unique = abap_false.
          ENDIF.
        ENDIF.
      ENDIF.

      DATA(ls_id_data) = VALUE bapibus1006_identification( idinstitute = <ident>-issue_place
                                                           idvalidfromdate = <ident>-issue_date
                                                           idvalidtodate = <ident>-validity
                                                           country = <ident>-issue_country
                                                             ).
      DATA(ls_id_data_x) = VALUE bapibus1006_identification_x( idinstitute = abap_true
                                                               idvalidfromdate =  abap_true
                                                               idvalidtodate =  abap_true
                                                               country =  abap_true    ).
      READ TABLE  gt_identification INTO DATA(ls_documents_tab) WITH KEY identificationtype = CONV bu_id_type( <ident>-type ).
      IF sy-subrc = 0."Если документ присуствует

        " если док  уникальный
        IF lv_unique EQ abap_true.
          CALL FUNCTION 'BUPA_IDENTIFICATION_REMOVE'
            EXPORTING
              iv_partner              = gs_partner-partner
              iv_identificationnumber = CONV bu_id_number( ls_documents_tab-identificationnumber )
              iv_identificationtype   = CONV bu_id_type( <ident>-type )
            TABLES
              et_return               = lt_return.

          IF is_error( lt_return ).
            MESSAGE e011(zcrm_int_mess) WITH 'в удалении' INTO DATA(lv_dummy1).
            append_message( lv_dummy1  ).

            gr_log->add_bapiret_tab( lt_return ).
          ENDIF.
        ENDIF.
      ENDIF.

      " если такого дока нет, или есть, но он не уникальный
      IF  ls_documents_tab-identificationnumber NE CONV bu_id_number( lv_num ).
        CALL FUNCTION 'BUPA_IDENTIFICATION_ADD'
          EXPORTING
            iv_partner              = gs_partner-partner
            iv_identificationnumber = CONV bu_id_number( lv_num )
            is_identification       = ls_id_data
          "  iv_x_save               = 'X'
            iv_identificationtype   = CONV bu_id_type( <ident>-type )
          TABLES
            et_return               = lt_return.

        IF is_error( lt_return ).
          MESSAGE e011(zcrm_int_mess) WITH 'в добавлении' INTO lv_dummy.
          append_message( lv_dummy ).
          gv_no_save = abap_true.
          gr_log->add_bapiret_tab( lt_return ).
        ENDIF.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_PERSON_EXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD set_person_ext.
  DATA ls_data_x  TYPE ztab00000b_x.
  DATA: ls_data TYPE   ztab00000b_attr.

  IF gs_current_partner-client_type <> gs_change_data-client_type.
    ls_data-zztype_kl = gs_change_data-client_type.
    ls_data_x-zztype_kl  = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-nationality <> gs_change_data-person_data-nationality.
    ls_data-zznation = gs_change_data-person_data-nationality.
    ls_data_x-zznation = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-cred_class <> gs_change_data-person_data-cred_class.
    ls_data-zzcred_class = gs_change_data-person_data-cred_class.
    ls_data_x-zzcred_class = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-is_resident <> gs_change_data-person_data-is_resident.
    ls_data-zzresident = gs_change_data-person_data-is_resident.
    ls_data_x-zzresident = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-work_ability <> gs_change_data-person_data-work_ability.
    ls_data-zzkrfl = gs_change_data-person_data-work_ability.
    ls_data_x-zzkrfl = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-black_list <> gs_change_data-person_data-black_list.
    ls_data-zzblacklist = gs_change_data-person_data-black_list.
    ls_data_x-zzblacklist = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-black_list_date_to <> gs_change_data-person_data-black_list_date_to.
    ls_data-zzbl_date  = gs_change_data-person_data-black_list_date_to.
    ls_data_x-zzbl_date  = abap_true.
  ENDIF.

  IF gs_current_partner-person_data-has_child  <> gs_change_data-person_data-has_child.
    ls_data-zzchild = gs_change_data-person_data-has_child.
    ls_data_x-zzchild = abap_true.
  ENDIF.

  IF ls_data_x IS NOT INITIAL.
    zcl_bp_general_ext=>set_data(
     EXPORTING
       iv_partner = iv_partner
       iv_save    = abap_false
       is_data    = ls_data
       is_data_x  = ls_data_x
       ).
  ENDIF.
  IF sy-subrc <> 0.
    MESSAGE e016(zcrm_int_mess) INTO DATA(lv_dummy).
    append_message( lv_dummy ).
    gv_no_save = abap_true.
    gr_log->add_sy( ).
  ENDIF.


ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->SET_X_STRUCT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_STRUCT                      TYPE        ANY
* | [<-->] CS_STRUCT_X                    TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD set_x_struct.
  DATA:
    lr_typedescr   TYPE REF TO cl_abap_typedescr,
    lr_structdescr TYPE REF TO cl_abap_structdescr,

    lt_fields      TYPE ttfieldname,
    lt_field_list  TYPE ddfields.

  lr_typedescr = cl_abap_structdescr=>describe_by_data( is_struct ).
  lr_structdescr ?= lr_typedescr.

  lt_field_list = lr_structdescr->get_ddic_field_list( ).

  LOOP AT lt_field_list ASSIGNING FIELD-SYMBOL(<lfs_field>).
    APPEND <lfs_field>-fieldname TO lt_fields.
  ENDLOOP.

  LOOP AT lt_fields ASSIGNING FIELD-SYMBOL(<field_name>).
    ASSIGN COMPONENT <field_name> OF STRUCTURE is_struct TO FIELD-SYMBOL(<is>).
    CHECK sy-subrc = 0.

    ASSIGN COMPONENT <field_name> OF STRUCTURE cs_struct_x TO FIELD-SYMBOL(<cs_x>).
    CHECK sy-subrc = 0.

    IF <is> IS NOT INITIAL.
      <cs_x> = abap_true.
    ENDIF.

  ENDLOOP.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->UPDATE_DATA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_data.

  CASE gs_partner-type.
*        Физ. лицо
    WHEN zif_partner_main_attr_const=>gs_bp_type-person.
      update_person( ).
*        Юр. лицо
    WHEN zif_partner_main_attr_const=>gs_bp_type-organisation.
      update_org( ).
    WHEN OTHERS.
      gv_no_save = abap_true.
  ENDCASE.

ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->UPDATE_MA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER_GUID                TYPE        BU_PARTNER_GUID
* | [--->] IV_FCODE                       TYPE        CHAR1
* | [--->] IV_TEMPL                       TYPE        CRMT_PROF_TEMPLATE
* | [--->] IT_ATTR                        TYPE        CRMT_MKTPROF_COMW_T
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_ma.
    DATA(lt_attr) =  it_attr.
    DATA: lt_return TYPE bapiret2_t.

      CALL FUNCTION 'CRM_MKTBP_CHANGE_BP'
      EXPORTING
        iv_profile_template_id = iv_templ
        iv_bp_guid             = iv_partner_guid
*       IV_XDESCR              = ' '
        iv_fcode               = iv_fcode "create
*       IV_MSA                 = 'X'
*       iv_commit              = 'X'
*       IV_PARTNER             =
*       IV_CONVERT_VALUES      = 'X'
      TABLES
        it_imp_seltab          = lt_attr[]
        et_return              = lt_return.

    IF is_error( lt_return ).
      MESSAGE e008(zcrm_int_mess) WITH zif_mkt_attr_const=>set-family  INTO DATA(lv_dummy).
      append_message( lv_dummy  ).
      gr_log->add_bapiret_tab( lt_return ).
      gv_no_save = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->UPDATE_ORG
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_org.

  update_partner_data(  iv_partner = gs_partner-partner
                           iv_type    =  zif_partner_main_attr_const=>gs_bp_type-organisation  ).
  CHECK gs_partner-partner IS NOT INITIAL.

  set_org_ext(  ).
  set_partner_address( gs_partner-partner ) .
  set_bp_address_ext( gs_partner-partner ).
  set_ma_attr( ).
  set_partner_ident( gs_partner-partner ).
  update_partner_rel( gs_partner-partner ).
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->UPDATE_PARTNER_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* | [--->] IV_TYPE                        TYPE        BU_TYPE
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_partner_data.

  DATA: lt_return         TYPE bapiret2_tab,
        lv_category       TYPE bapibus1006_head-partn_cat,
        ls_data           TYPE bapibus1006_central,
        ls_data_old       TYPE bapibus1006_central,
        ls_data_x         TYPE bapibus1006_central_x,
        ls_data_person    TYPE bapibus1006_central_person,
        " gs_current_partner-person_data TYPE bapibus1006_central_person,
        ls_data_person_x  TYPE bapibus1006_central_person_x,
        ls_data_organ     TYPE bapibus1006_central_organ,
        ls_data_organ_old TYPE bapibus1006_central_organ,
        ls_data_organ_x   TYPE bapibus1006_central_organ_x.
  DATA:
    lt_but000      TYPE STANDARD TABLE OF but000,
    ls_attr        TYPE ztd_name4search_attr,
    lv_name4search TYPE string.


  CASE iv_type.
    WHEN  zif_partner_main_attr_const=>gs_bp_type-person.
      IF gs_current_partner-person_data-last_name <>  gs_change_data-person_data-last_name.
        ls_data_person-lastname      = gs_change_data-person_data-last_name.
        ls_data_person_x-lastname = abap_true.
      ENDIF.
      IF gs_current_partner-person_data-first_name <> gs_change_data-person_data-first_name.
        ls_data_person-firstname     = gs_change_data-person_data-first_name.
        ls_data_person_x-firstname = abap_true.
      ENDIF.
      IF gs_current_partner-person_data-middle_name <> gs_change_data-person_data-middle_name.
        ls_data_person-middlename    = gs_change_data-person_data-middle_name.
        ls_data_person_x-middlename = abap_true.
      ENDIF.

      IF gs_current_partner-person_data-birthplace <> gs_change_data-person_data-birthplace.
        ls_data_person-birthplace    = gs_change_data-person_data-birthplace.
        ls_data_person_x-birthplace = abap_true.
      ENDIF.
      IF gs_current_partner-person_data-birthdate <> gs_change_data-person_data-birthdate.
        ls_data_person-birthdate    = gs_change_data-person_data-birthdate.
        ls_data_person_x-birthdate = abap_true.
      ENDIF.

      IF gs_current_partner-person_data-citizenship <> gs_change_data-person_data-citizenship.
        ls_data_person-countryorigin = gs_change_data-person_data-citizenship.
        ls_data_person_x-countryorigin = abap_true.
      ENDIF.
      IF gs_current_partner-person_data-sex <> gs_change_data-person_data-sex.
        ls_data_person-sex           = gs_change_data-person_data-sex.
        ls_data_person_x-sex = abap_true.
      ENDIF.



    WHEN  zif_partner_main_attr_const=>gs_bp_type-organisation.


      IF gs_current_partner-org_data-org_name <> |{ gs_change_data-org_data-org_name }|.
        ls_data_organ-name1 = CONV char35( gs_change_data-org_data-org_name ).
        ls_data_organ_x-name1 = abap_true.
        IF strlen( gs_change_data-org_data-org_name ) > 35.
          ls_data_organ-name2 = CONV char35( gs_change_data-org_data-org_name + 35 ).
          ls_data_organ_x-name2 = abap_true.
        ENDIF.

        IF strlen( gs_change_data-org_data-org_name ) > 70.
          ls_data_organ-name3 = CONV char35( gs_change_data-org_data-org_name + 70 ).
          ls_data_organ_x-name3 = abap_true.
        ENDIF.

      ENDIF.

*      IF gs_current_partner-org_data-legal_form <> gs_change_data-org_data-legal_form.
*        ls_data_organ-legalform = gs_change_data-org_data-legal_form.
*        ls_data_organ_x-legalform = abap_true.
*      ENDIF.

      IF gs_current_partner-org_data-foundation_date <> gs_change_data-org_data-foundation_date.
        ls_data_organ-foundationdate = gs_change_data-org_data-foundation_date.
        ls_data_organ_x-foundationdate = abap_true.
      ENDIF.

  ENDCASE.

  CALL FUNCTION 'BUPA_CENTRAL_CHANGE'
    EXPORTING
      iv_partner       = iv_partner
      is_data          = ls_data
      is_data_x        = ls_data_x
      is_data_person   = ls_data_person
      is_data_person_x = ls_data_person_x
      is_data_organ    = ls_data_organ
      is_data_organ_x  = ls_data_organ_x
    TABLES
      et_return        = lt_return.

  IF is_error( lt_return ).
    MESSAGE e001(zcrm_int_mess) INTO DATA(lv_dummy).
    append_message( lv_dummy  ).
    gv_no_save = abap_true.
    gr_log->add_bapiret_tab( lt_return ).
  ENDIF.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->UPDATE_PARTNER_REL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PARTNER                     TYPE        BU_PARTNER
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_partner_rel.

  DATA: lv_emp_guid TYPE bu_partner_guid.
  DATA: lt_return    TYPE bapiret2_tab,
        lt_relations TYPE bapibus1006_relations_tab.
  DATA: lv_partner TYPE bu_partner.


  LOOP AT gs_change_data-relations_tab INTO DATA(ls_rel).

    CALL FUNCTION 'BUPA_NUMBERS_GET'
      EXPORTING
        iv_partner      = CONV bu_partner( ls_rel-id_crm )
      IMPORTING
        ev_partner_guid = lv_emp_guid
        ev_partner      = lv_partner.

    IF lv_emp_guid IS INITIAL.

      MESSAGE e012(zcrm_int_mess) INTO DATA(lv_dummy).
      append_message( lv_dummy  ).
      gr_log->add_sy( ).
      RETURN.
    ELSE.

      IF ls_rel-relation_type EQ zif_relationships_const=>accountant.
        READ TABLE  gs_current_partner-relations_tab INTO DATA(ls_old_rel_1)
         WITH KEY relation_type  = zif_relationships_const=>accountant.
        IF sy-subrc EQ 0."если есть отношение бухгалтер и не с idcrm

          IF  ls_old_rel_1-id_crm NE CONV bu_partner( lv_partner )  ."если нет отношения бухгалтер с тем же ДП
            CALL FUNCTION 'BUPR_RELATIONSHIP_DELETE'
              EXPORTING
                iv_partner_1    = gs_partner-partner
                iv_partner_2    = lv_partner
                iv_relationship = CONV bu_reltyp( zif_relationships_const=>accountant )
              TABLES
                et_return       = lt_return.

            IF is_error( lt_return ).
              MESSAGE e012(zcrm_int_mess) INTO lv_dummy.
              append_message( lv_dummy  ).
              gr_log->add_bapiret_tab( lt_return ).
              gv_no_save = abap_true.

            ELSE." Если нет ошибки удаления
              CALL FUNCTION 'BUPR_RELATIONSHIP_CREATE'
                EXPORTING
                  iv_partner_1    = iv_partner
                  iv_partner_2    = CONV bu_partner( lv_partner )
                  iv_relationship = CONV bu_reltyp( zif_relationships_const=>accountant )
                TABLES
                  et_return       = lt_return.

              IF is_error( lt_return ).
                MESSAGE e012(zcrm_int_mess) INTO lv_dummy.
                append_message( lv_dummy  ).
                gv_no_save = abap_true.
                gr_log->add_bapiret_tab( lt_return ).
              ENDIF.

            ENDIF.

          ENDIF.
        ENDIF.
      ELSEIF ls_rel-relation_type  EQ zif_relationships_const=>director.
        READ TABLE  gs_current_partner-relations_tab INTO DATA(ls_old_rel_2)
          WITH KEY relation_type  = zif_relationships_const=>director.
        IF sy-subrc EQ 0."если есть отношение директор
          IF ls_old_rel_2-id_crm NE CONV bu_partner( lv_partner )  ."если нет отношения директор с тем же ДП

            CALL FUNCTION 'BUPR_RELATIONSHIP_DELETE'
              EXPORTING
                iv_partner_1    = gs_partner-partner
                iv_partner_2    = CONV bu_partner( ls_old_rel_2-id_crm )
                iv_relationship = CONV bu_reltyp( zif_relationships_const=>director )
              TABLES
                et_return       = lt_return.

            IF is_error( lt_return ).
              MESSAGE e012(zcrm_int_mess) INTO lv_dummy.
              append_message( lv_dummy  ).
              gr_log->add_bapiret_tab( lt_return ).
              gv_no_save = abap_true.
            ELSE.
              CALL FUNCTION 'BUPR_RELATIONSHIP_CREATE'
                EXPORTING
                  iv_partner_1    = iv_partner
                  iv_partner_2    = CONV bu_partner( lv_partner )
                  iv_relationship = CONV bu_reltyp( zif_relationships_const=>director )
                TABLES
                  et_return       = lt_return.

              IF is_error( lt_return ).
                MESSAGE e012(zcrm_int_mess) INTO lv_dummy.
                append_message( lv_dummy  ).
                gv_no_save = abap_true.
                gr_log->add_bapiret_tab( lt_return ).
              ENDIF.
            ENDIF.

          ENDIF.
        ENDIF.
      ENDIF.

      CHECK ls_rel-relation_type NE  zif_relationships_const=>accountant
      AND ls_rel-relation_type NE  zif_relationships_const=>director
      AND ls_rel-relation_type NE  zif_relationships_const=>entrepreneur.

      READ TABLE  gs_current_partner-relations_tab INTO DATA(ls_old_rel)
            WITH KEY relation_type  = ls_rel-relation_type.

      CASE ls_rel-action .
        WHEN  '1'."создать
          IF ls_old_rel-id_crm EQ CONV bu_partner( lv_partner )
            AND  ls_old_rel-relation_type EQ ls_rel-relation_type ."уже есть такое отношение
          ELSE."если нет такого отношения

            CALL FUNCTION 'BUPR_RELATIONSHIP_CREATE'
              EXPORTING
                iv_partner_1    = iv_partner
                iv_partner_2    = CONV bu_partner( lv_partner )
                iv_relationship = CONV bu_reltyp( ls_rel-relation_type )
              TABLES
                et_return       = lt_return.

            IF is_error( lt_return ).
              MESSAGE e012(zcrm_int_mess) INTO lv_dummy.
              append_message( lv_dummy  ).
              gv_no_save = abap_true.
              gr_log->add_bapiret_tab( lt_return ).
            ENDIF.
          ENDIF.

        WHEN '0'."удалить
          IF ls_old_rel-id_crm NE CONV bu_partner( lv_partner )
            AND  ls_old_rel-relation_type NE ls_rel-relation_type ."нет такого отношения, нечего удалять
          ELSE.
            CALL FUNCTION 'BUPR_RELATIONSHIP_DELETE'
              EXPORTING
                iv_partner_1    = iv_partner
                iv_partner_2    = CONV bu_partner( lv_partner )
                iv_relationship = CONV bu_reltyp( ls_rel-relation_type )
              TABLES
                et_return       = lt_return.

            IF is_error( lt_return ).
              MESSAGE e012(zcrm_int_mess) INTO lv_dummy.
              append_message( lv_dummy  ).
              gv_no_save = abap_true.
              gr_log->add_bapiret_tab( lt_return ).
            ENDIF.
          ENDIF.
      ENDCASE.


    ENDIF."if lv_guid is initial
  ENDLOOP."gs_change_data-relationsTab

ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZWSCL_BPMCUSTOMER_UPDATE->UPDATE_PERSON
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD update_person.

  update_partner_data(  iv_partner   = gs_partner-partner
                        iv_type     = zif_partner_main_attr_const=>gs_bp_type-person        ).

  set_person_ext( gs_partner-partner ).
  set_partner_address( gs_partner-partner ).
  set_bp_address_ext( gs_partner-partner ).
  set_ma_attr( ).
  set_partner_ident( gs_partner-partner ).
  update_partner_rel( gs_partner-partner ).
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZWSCL_BPMCUSTOMER_UPDATE->ZWSII_BPMCUSTOMER_UPDATE~UPDATE_CUSTOMER
* +-------------------------------------------------------------------------------------------------+
* | [--->] INPUT                          TYPE        ZWSBPMCUST_UPDATE_INPUT
* | [<---] OUTPUT                         TYPE        ZWSBPMCUST_UPDATE_OUTPUT
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD zwsii_bpmcustomer_update~update_customer.
  DATA: lt_return TYPE bapiret2_t.
  DATA:lv_is_processed TYPE abap_bool.

  gs_change_data = input-bpmcust_update_input-upd_customer_request.
  gr_log = zcl_ballog=>create_log( ip_object = zcl_ballog=>gc_log-object_zcrm_int
                                   ip_subobject = zcl_ballog=>gc_log-subobject_zint030_011
                                   ip_ext_no    = CONV balnrext( input-bpmcust_update_input-upd_customer_request-id_crm )
                                   ).

  "entrepreneur
  IF input-bpmcust_update_input-upd_customer_request-client_type EQ '11'.
    READ TABLE  input-bpmcust_update_input-upd_customer_request-relations_tab
    INTO DATA(ls_rel) WITH KEY relation_type = zif_relationships_const=>entrepreneur  .
    IF sy-subrc EQ 0.
      lv_is_processed  =   process_data( iv_partner = CONV bu_partner( ls_rel-id_crm ) ).
    ENDIF.
  ELSE.
    lv_is_processed  =  process_data( iv_partner = CONV bu_partner( gs_change_data-id_crm ) ).
  ENDIF.

  IF gs_change_data-id_crm IS NOT INITIAL.
    IF gv_no_save EQ abap_false AND lv_is_processed EQ abap_true.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
      APPEND VALUE zwsbpmcust_update_data_err_t( error = 0 ) TO  output-bpmcust_update_output-upd_customer_response-errors.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ENDIF.
  ELSE.

    MESSAGE e001(zpega_int)  INTO DATA(lv_dummy).
    APPEND VALUE zwsbpmcust_update_data_err_t( error = 1 message = lv_dummy ) TO output-bpmcust_update_output-upd_customer_response-errors.
  ENDIF.

  output-bpmcust_update_output-upd_customer_response-id_crm = gs_partner-partner.

  LOOP AT gt_addr_reply ASSIGNING FIELD-SYMBOL(<addr>).
    APPEND VALUE zwsbpmcust_update_data_addr_ta( addr_guid = <addr>-addrguid )
      TO output-bpmcust_update_output-upd_customer_response-addr_num_t.
  ENDLOOP.

  LOOP AT gt_messages ASSIGNING FIELD-SYMBOL(<msg>).
    output-bpmcust_update_output-upd_customer_response-errors = VALUE #( ( error = '1'
                                                                                 message = <msg> ) ).
    AT LAST.
      APPEND VALUE #( error = '1'
                      message = |CRM лог { gs_partner-partner }| )
                   TO output-bpmcust_update_output-upd_customer_response-errors.
    ENDAT.
  ENDLOOP.

  gr_log->save( ).

ENDMETHOD.
ENDCLASS.